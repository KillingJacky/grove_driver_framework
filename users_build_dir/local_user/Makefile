# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

GCC_BIN = 
OUTPUT_BIN ?= mbed_1768_grove_driver_framework

BASE_DIR = ../..
SULI_DIR = $(BASE_DIR)/suli
GROVES_DIR = $(BASE_DIR)/grove_drivers
RPC_SERVER_DIR = $(BASE_DIR)/grove_rpc_server
BUILD_DIR = .
OUTPUT = $(BUILD_DIR)/$(OUTPUT_BIN)

GROVES ?= grove_example

OBJECTS = main.o user_main.o suli2.o rpc_server.o rpc_stream.o rpc_server_registration.o

SYS_PATHS = $(BASE_DIR)/mbed/TARGET_LPC1768/TOOLCHAIN_GCC_ARM
SYS_OBJECTS = cmsis_nvic.o system_LPC17xx.o board.o retarget.o startup_LPC17xx.o 

INCLUDE_PATHS = -I. -I$(BASE_DIR) -I$(BASE_DIR)/mbed -I$(BASE_DIR)/mbed/TARGET_LPC1768 -I$(BASE_DIR)/mbed/TARGET_LPC1768/TOOLCHAIN_GCC_ARM -I$(BASE_DIR)/mbed/TARGET_LPC1768/TARGET_NXP -I$(BASE_DIR)/mbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X -I$(BASE_DIR)/mbed/TARGET_LPC1768/TARGET_NXP/TARGET_LPC176X/TARGET_MBED_LPC1768 
INCLUDE_PATHS += -I$(SULI_DIR) -I$(RPC_SERVER_DIR)


############################################################################### 
### DO NOT CHANGE THE FOLLOWING CONTENT
############################################################################### 
OBJECTS += $(foreach g,$(GROVES),$(g).o $(g)_class.o $(g)_gen.o)

INCLUDE_PATHS += $(foreach g,$(GROVES),-I$(GROVES_DIR)/$(g))
GROVES_DIR_LIST = $(foreach g,$(GROVES),$(GROVES_DIR)/$(g))

LIBRARY_PATHS = -L$(BASE_DIR)/mbed/TARGET_LPC1768/TOOLCHAIN_GCC_ARM 
LIBRARIES = -lmbed 
LINKER_SCRIPT = $(BASE_DIR)/mbed/TARGET_LPC1768/TOOLCHAIN_GCC_ARM/LPC1768.ld

AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy
OBJDUMP = $(GCC_BIN)arm-none-eabi-objdump
SIZE 	= $(GCC_BIN)arm-none-eabi-size

CPU = -mcpu=cortex-m3 -mthumb
CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -Wall -fno-exceptions -ffunction-sections -fdata-sections -fomit-frame-pointer
CC_FLAGS += -MMD -MP
CC_SYMBOLS = -DTARGET_LPC1768 -DTARGET_M3 -DTARGET_CORTEX_M -DTARGET_NXP -DTARGET_LPC176X -DTARGET_MBED_LPC1768 -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -D__CORTEX_M3 -DARM_MATH_CM3 -DMBED_BUILD_TIMESTAMP=1429796006.34 -D__MBED__=1 

LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float -Wl,--wrap,main
LD_FLAGS += -Wl,-Map=$(OUTPUT).map,--cref
LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys

ifeq ($(DEBUG), 1)
  CC_FLAGS += -DDEBUG -O0
else
  CC_FLAGS += -DNDEBUG -Os
endif

$(info $(OBJECTS))
$(info $(GROVES_DIR_LIST))


VPATH = $(BASE_DIR):$(SULI_DIR):$(RPC_SERVER_DIR):$(BUILD_DIR):$(GROVES_DIR_LIST):$(SYS_PATHS)

.PHONY: all clean

all: $(OUTPUT).bin $(OUTPUT).hex 

clean:
	rm -f $(OUTPUT).bin $(OUTPUT).elf $(OUTPUT).hex $(OUTPUT).map $(OUTPUT).lst $(OBJECTS) $(SYS_OBJECTS) $(DEPS)

%.o: %.s
	$(AS) $(CPU) -o $@ $<

%.o: %.c
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

%.o: %.cpp
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 -fno-rtti $(INCLUDE_PATHS) -o $@ $<


$(OUTPUT).elf: $(OBJECTS) $(SYS_OBJECTS)
	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)
	@echo ""
	@echo "*****"
	@echo "***** You must modify vector checksum value in *.bin and *.hex files."
	@echo "*****"
	@echo ""
	$(SIZE) $@

$(OUTPUT).bin: $(OUTPUT).elf
	@$(OBJCOPY) -O binary $< $@

$(OUTPUT).hex: $(OUTPUT).elf
	@$(OBJCOPY) -O ihex $< $@

$(OUTPUT).lst: $(OUTPUT).elf
	@$(OBJDUMP) -Sdh $< > $@

lst: $(OUTPUT).lst

size:
	$(SIZE) $(OUTPUT).elf

DEPS = $(OBJECTS:.o=.d) $(SYS_OBJECTS:.o=.d)
-include $(DEPS)
